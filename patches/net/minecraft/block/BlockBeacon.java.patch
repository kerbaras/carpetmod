--- ../src-base/minecraft/net/minecraft/block/BlockBeacon.java
+++ ../src-work/minecraft/net/minecraft/block/BlockBeacon.java
@@ -20,6 +20,9 @@
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 
+import carpet.CarpetSettings;
+import test.Test;
+
 public class BlockBeacon extends BlockContainer
 {
     public BlockBeacon()
@@ -93,17 +96,50 @@
             ((TileEntityBeacon)tileentity).func_174908_m();
             p_189540_2_.func_175641_c(p_189540_3_, this, 1, 0);
         }
+
+        if (CarpetSettings.asyncBeaconUpdates && p_189540_2_.func_175640_z(p_189540_3_))
+        {
+            HttpUtil.field_180193_a.submit(() -> p_189540_2_.func_175722_b(p_189540_3_, this, true));
+        }
     }
 
     public static void func_176450_d(final World p_176450_0_, final BlockPos p_176450_1_)
     {
+        boolean glassRemoved = Test.isGlassRemoved;
+        //Test.profileResults.put("thread_scheduled", System.nanoTime());
         HttpUtil.field_180193_a.submit(new Runnable()
         {
             public void run()
             {
+                if (glassRemoved) {
+                    long time = System.nanoTime();
+                    if (!Test.isFirstBeacon) {
+                        Test.isFirstBeacon = true;
+                        Test.profileResults.put("first_beacon_start", time);
+                    }
+                    Test.profileResults.put("last_beacon_start", time);
+                    if (Test.wasRehashChunkLoaded) {
+                        if (!Test.loggedRehashBeacon) {
+                            Test.loggedRehashBeacon = true;
+                            Test.profileResults.put("after_rehash_beacon_start", time);
+                        }
+                    }
+                    else {
+                        Test.profileResults.put("before_rehash_beacon_start", time);
+                    }
+                }
+//                Object[] values;
+//                int mask;
+//                try {
+//                    values = CommandLoadedChunks.getValues((Long2ObjectOpenHashMap) ((ChunkProviderServer) worldIn.getChunkProvider()).loadedChunks).clone();
+//                    mask = CommandLoadedChunks.getMask((Long2ObjectOpenHashMap) ((ChunkProviderServer) worldIn.getChunkProvider()).loadedChunks);
+//                } catch (Exception e) {
+//                    return;
+//                }
                 Chunk chunk = p_176450_0_.func_175726_f(p_176450_1_);
 
-                for (int i = p_176450_1_.func_177956_o() - 1; i >= 0; --i)
+                int i;
+                for (i = p_176450_1_.func_177956_o() - 1; i >= 0; --i)
                 {
                     final BlockPos blockpos = new BlockPos(p_176450_1_.func_177958_n(), i, p_176450_1_.func_177952_p());
 
@@ -131,7 +167,31 @@
                         });
                     }
                 }
+                //Test.profileResults.put("beacon_end", System.nanoTime());
+//                int index = (int) HashCommon.mix(ChunkPos.asLong(glassPos.getX() >> 4, glassPos.getZ() >> 4)) & mask;
+//                System.out.println(index);
+//                while (values[index] != null) {
+//                    Chunk c = (Chunk) values[index];
+//                    System.out.println("- " + c.x + ", " + c.z);
+//                    index = (index + 1) & mask;
+//                }
+//                System.out.println(glassPos.getY() - i);
+                if (glassRemoved) {
+                    long time = System.nanoTime();
+                    Test.profileResults.put("last_beacon_end", time);
+                    if (!Test.wasRehashChunkLoaded) {
+                        Test.profileResults.put("before_rehash_beacon_end", time);
+                    }
+                    else {
+
+                        if (!Test.loggedRehashBeaconEnd) {
+                            Test.loggedRehashBeaconEnd = true;
+                            Test.profileResults.put("after_rehash_beacon_start", time);
+                        }
+                    }
+                }
             }
         });
+        //Test.profileResults.put("thread_scheduling_done", System.nanoTime());
     }
 }
